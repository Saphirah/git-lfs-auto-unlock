#!/bin/bash
#
# This hook script detectes changes on the specified remote ref (track_ref) and
# unlocks the own file locks that have already been pushed/merged to the remote branch.
#
TARGET_BRANCH=development
set -eu

function main {
    local state="$1"

    # Note: old_value is always empty on updating remote refs
    while read old_value new_value ref_name
    do
        if [[ "${ref_name}" != refs/remotes/* ]];
        then
            continue
        fi
        
        local old_ref_key='tmp.lfs.auto-unlock.old-ref'
        
        case "${state}" in
            'prepared')
                # Store the old_ref for later use
                store_tmp_value "${old_ref_key}" "$(git rev-parse "${ref_name}")"
                ;;
            'committed')
                old_value="$(pull_tmp_value "${old_ref_key}")"

                if is_remote_default_branch "${ref_name}"
                then
                    local committed_locked_files dirty_files
                    committed_locked_files="$(fetch_committed_locked_files "${old_value}" "${new_value}")"
                    dirty_files="$(fetch_dirty_files)"
                    # unlock the committed files that aren't dirty
                    sort <(echo "${committed_locked_files}") <(echo "${dirty_files}") <(echo "${dirty_files}") \
                        | uniq --unique \
                        | unlock_files
                    # report dirty files that are locked and committed
                    sort <(echo "${committed_locked_files}") <(echo "${dirty_files}") \
                        | uniq --repeated \
                        | report_dirty_files
                fi
                ;;
        esac
    done
}

function is_remote_default_branch {
    local ref_name="$1"
    local remote_name
    remote_name="$(awk -F/ '{print $3}' <<<"${ref_name}")"
    test "${ref_name}" = "refs/remotes/${remote_name}/${TARGET_BRANCH}"
}

function store_tmp_value {
    local key="$1" value="$2"
    git config --local --add "${key}" "${value}"
}

function pull_tmp_value {
    local key="$1"
    git config --local "${key}"
    git config --local --unset-all "${key}"
}

function fetch_committed_locked_files {
    local old_ref="$1" new_ref="$2"
    sort  <(fetch_locked_files) <(git diff --name-only "${old_ref}" "${new_ref}") \
        | uniq --repeated
}

function fetch_locked_files {
    git lfs locks --local \
        | awk -v FS='\t' '{ print gensub(/ *$/, "", 1, $1) }'
}

function fetch_dirty_files {
    git status --porcelain=v1 \
        | awk -v FS="\"" '{print $2}'
}

function unlock_files {
    xargs --delimiter=$'\n' --max-args=1 --no-run-if-empty git lfs unlock
}

function report_dirty_files {
    awk '
        NR == 1 { 
            print "*** Skip unlocking due to following files has uncommitted changes: ***"
        }
        { print " * "$0 }
    '
}

main "$@"
